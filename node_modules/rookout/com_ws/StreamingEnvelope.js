"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _googleProtobuf = _interopRequireDefault(require("google-protobuf"));

var _NamespaceSerializer = _interopRequireDefault(require("../processor/NamespaceSerializer2"));

var _timestamp_pb = _interopRequireDefault(require("google-protobuf/google/protobuf/timestamp_pb"));

var _Variant2Writer = _interopRequireDefault(require("../processor/Variant2Writer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TIMESTAMP_FIELD_NUMBER = 1;
const MSG_FIELD_NUMBER = 2;
const TYPE_URL_FIELD_NUMBER = 1;
const VALUE_FIELD_NUMBER = 2;
const AUG_REPORT_MESSAGE_URL = "type.googleapis.com/com.rookout.AugReportMessage";
const AGENT_ID_FIELD_NUMBER = 1;
const AUG_ID_FIELD_NUMBER = 2;
const REPORT_ID_FIELD_NUMBER = 4;
const STRINGS_CACHE_FIELD_NUMBER = 5; //const BUFFER_CACHE_BUFFERS_FIELD_NUMBER = 6;
//const REVERSE_LIST_ORDER_FIELD_NUMBER = 7;

const ARGUMENTS2_FIELD_NUMBER = 8;

class StreamingEnvelope {
  constructor(agentId, augId, reportId, args) {
    this.agentId = agentId;
    this.augId = augId;
    this.reportId = reportId;
    this.date = new Date();
    this.writer = new _Variant2Writer.default();
    this.serializer = new _NamespaceSerializer.default(); // Create all headers

    this.writer.beginSubMessage(MSG_FIELD_NUMBER); // Any

    this.writer.beginSubMessage(VALUE_FIELD_NUMBER); // Value

    this.writer.beginSubMessage(ARGUMENTS2_FIELD_NUMBER); // Arguments2

    this.serializer.dump(args, this.writer, true);
    this.length = this.writer.totalLength_ + this.serializer.getEstimatedPendingBytes();
    this.buffer = null;
  }

  getBuffer() {
    if (null == this.buffer) {
      // Pop ARGUMENTS2_FIELD_NUMBER
      this.writer.endSubMessage(); // Write headers

      this.writer.writeString(AGENT_ID_FIELD_NUMBER, this.agentId);
      this.writer.writeString(AUG_ID_FIELD_NUMBER, this.augId);
      this.writer.writeString(REPORT_ID_FIELD_NUMBER, this.reportId); // Create Protobuf map field

      let message = new _googleProtobuf.default.Message();

      _googleProtobuf.default.Message.initialize(message);

      let stringCacheMap = _googleProtobuf.default.Message.getMapField(message, STRINGS_CACHE_FIELD_NUMBER, false, null); // Copy strings into cache (consider optimizing in the future - create in NamespaceSerializerBase)


      let stringCache = this.serializer.getStringCache();
      Object.keys(stringCache).forEach(key => {
        stringCacheMap.set(key, stringCache[key]);
      }); // Write string cache to writer

      if (stringCacheMap.getLength() > 0) {
        stringCacheMap.serializeBinary(STRINGS_CACHE_FIELD_NUMBER, this.writer, _googleProtobuf.default.BinaryWriter.prototype.writeString, _googleProtobuf.default.BinaryWriter.prototype.writeUint32);
      } // Pop VALUE_FIELD_NUMBER


      this.writer.endSubMessage(); // Write any type URL

      this.writer.writeString(TYPE_URL_FIELD_NUMBER, AUG_REPORT_MESSAGE_URL); // Pop MSG_FIELD_NUMBER

      this.writer.endSubMessage();
      let self = this; // Write timestamp

      this.writer.writeMessage(TIMESTAMP_FIELD_NUMBER, this.date, (ts, writer) => {
        const date = new _timestamp_pb.default.Timestamp();
        date.fromDate(ts);

        _timestamp_pb.default.Timestamp.serializeBinaryToWriter(date, self.writer);
      });
      this.buffer = this.writer.getResultBuffer();
      this.serializer = null;
      this.writer = null;
    }

    return this.buffer;
  }

}

exports.default = StreamingEnvelope;