"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Aug = require("./Aug");

class LimitManager {
  constructor(limiters, minTime) {
    this.limiters = limiters;
    this.minTime = minTime;
  }

  tryWithLimits(startTime, skipLimiters, augCore) {
    let aftersToCall = [];

    try {
      let err;

      for (let limiter of this.limiters) {
        let status = limiter.beforeRun(startTime);

        if (status.limitStatus !== _Aug.augStatus.Active) {
          err = status;
        }

        if (status.limitStatus === _Aug.augStatus.Active || skipLimiters) {
          aftersToCall.push(() => limiter.afterRun(startTime, this.minTime));
        }
      }

      if (skipLimiters || err === undefined) {
        augCore();
      }

      if (err !== undefined) {
        return err;
      }

      return {
        limitStatus: _Aug.augStatus.Active,
        error: null
      }; // Even if some limiter threw an exception, we want to call the `after`s of the previous limiters
    } finally {
      for (let afterRun of aftersToCall) {
        afterRun();
      }
    }
  }

}

exports.default = LimitManager;