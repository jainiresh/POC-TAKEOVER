"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AssertAug = void 0;

var _Aug = _interopRequireDefault(require("./Aug"));

var _ContainerNamespace = _interopRequireDefault(require("../processor/namespaces/ContainerNamespace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CALLER_STACK_INDEX = 4;
const MATCHER_STACK_INDEX = 2;
const HOOKED_TEST_STACK_INDEX = 1;

class AssertAug extends _Aug.default {
  constructor(augId, location, action, condition, output, triggerServices, maxAugTime, limitManager, timeout = 2500) {
    super(augId, location, action, condition, output, triggerServices, maxAugTime, limitManager, timeout, CALLER_STACK_INDEX);
  }

  executeInner(stack, extracted, msgId) {
    const matcherLocals = stack.readKey(MATCHER_STACK_INDEX).callMethod('locals');
    const currentTestName = matcherLocals.readAttribute('matcherContext').readAttribute('currentTestName');
    const testLocals = stack.readKey(HOOKED_TEST_STACK_INDEX).callMethod('locals');
    let expected = '';

    try {
      expected = testLocals.readAttribute('expected');
    } catch (e) {}

    let actual = '';

    try {
      actual = testLocals.readAttribute('actual');
    } catch (e) {}

    let message = '';

    try {
      message = testLocals.readAttribute('message');
      message.obj = message.obj.replace(/\u001b\[\d+m/g, '');
    } catch (e) {}

    const testInfo = new _ContainerNamespace.default({
      'expected': expected,
      'actual': actual,
      'test_name': currentTestName,
      'message': message
    });
    extracted = new _ContainerNamespace.default({
      'test_info': testInfo
    });
    super.executeInner(stack, extracted, msgId);
  }

}

exports.AssertAug = AssertAug;