"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _RookError = _interopRequireDefault(require("../../processor/RookError"));

var _logger = require("../../logger");

var _exceptions = require("../../exceptions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const path = require('path');

const config = require('../../config');

const ALLOWED_EXTENSION = /\.([cm]?jsx?|tsx?|coffee)$/i;

class LocationFileLine {
  constructor(configuration, factory) {
    var _configuration$sha, _configuration$line_c;

    _defineProperty(this, "minTime", config.RateLimitConfiguration.AUG_RATE_LIMITER_MINIMUM_DURATION_TIME_NS);

    this.filename = configuration.filename;

    if (!(typeof this.filename === 'string' || this.filename instanceof String)) {
      throw new _exceptions.RookAugInvalidKey('filename'.configuration);
    }

    this.lineno = configuration.lineno;

    if (!Number.isInteger(this.lineno)) {
      throw new _exceptions.RookAugInvalidKey('lineno'.configuration);
    }

    this.fileHash = (_configuration$sha = configuration.sha256) === null || _configuration$sha === void 0 ? void 0 : _configuration$sha.padStart(64, '0');
    this.lineCrc32 = (_configuration$line_c = configuration.line_crc32_2) === null || _configuration$line_c === void 0 ? void 0 : _configuration$line_c.padStart(8, '0'); // If missing, we assume line is not unique

    this.lineUnique = configuration.line_unique || false;
    this.includeExternals = configuration.includeExternals; // If auto mode, guess based on file name

    if (null === this.includeExternals || undefined === this.includeExternals) {
      // If filename is not a string, we can't auto-detect
      if (typeof this.filename !== 'string' && !(this.filename instanceof String)) {
        this.includeExternals = false;
      } else {
        // Get folder name
        const folder = path.dirname(this.filename); // If folder exists and is not generic, it is safe to include externals

        this.includeExternals = folder !== '.' && folder !== 'lib' && folder !== 'src';
      }
    }
  }

  addAug(triggerServices, aug) {
    if (!this.isValidFilePath()) {
      _logger.logger.warn(`Discarding aug ${aug.id} due to bad file extension ${this.filename}`);

      aug.setRemoved();
      return;
    }

    let debuggerService = triggerServices.getService("DebuggerService");
    let tracingService = triggerServices.getService("TracingService");
    let v8Condition;

    if (tracingService !== undefined) {
      v8Condition = tracingService.setDebuggerEvaluationCondition();
    }

    if (debuggerService === undefined) {
      _logger.logger.warn(`Discarding aug ${aug.id} due to no debugger service`);

      aug.setRemoved();
      return;
    }

    aug.setPending();
    debuggerService.registerNotification(aug, this.filename, this.fileHash, this.includeExternals, this.lineno, this.lineCrc32, this.lineUnique, matchInfo => {
      if (null !== matchInfo.script && undefined !== matchInfo.script) {
        try {
          if (matchInfo.error !== null) {
            throw matchInfo.error;
          }

          debuggerService.addAug(matchInfo, aug, v8Condition);
        } catch (e) {
          const message = "Exception when adding aug";

          _logger.logger.exception(message, e);

          aug.setError(new _RookError.default(e, message));
        }
      }
    }, () => {
      aug.setRemoved();
    });
  }

  isValidFilePath() {
    return this.filename.match(ALLOWED_EXTENSION);
  }

}

exports.default = LocationFileLine;