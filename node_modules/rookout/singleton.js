"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.singleton = void 0;

var _uuid = require("uuid");

var _CommandHandler = _interopRequireDefault(require("./com_ws/CommandHandler"));

var _logger = require("./logger");

var _utils = require("./utils");

var _TriggerServices = _interopRequireDefault(require("./TriggerServices"));

var _AugManager = _interopRequireDefault(require("./augs/AugManager"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Output = require("./com_ws/OutputWs").default;

class Singleton {
  constructor() {
    this.id = (0, _uuid.v4)().replace(/\-/g, "");
    this.output = new Output(this.id);
    this.servicesStarted = false;
    this.triggerServices = null;
    this.augManager = null;
    this.agentCom = null;
  }

  async close() {
    _logger.logger.info("Shutting down");

    const agentCom = this.agentCom;
    this.agentCom = null;

    if (null !== agentCom) {
      await agentCom.close();
    }

    await this.stopServices();
  }

  flush(callback) {
    this.output.flushMessages(callback);
  }

  startServices() {
    if (this.servicesStarted) {
      return;
    }

    this.triggerServices = new _TriggerServices.default();
    this.augManager = new _AugManager.default(this.triggerServices, this.output);
    this.servicesStarted = true;
  }

  async stopServices() {
    if (!this.servicesStarted) {
      return;
    }

    this.augManager = null;
    const triggerSvc = this.triggerServices;
    this.triggerServices = null;
    await triggerSvc.close();
    this.servicesStarted = false;
  }

  connect(token, host, port, proxy, tags, labels, keepRef, debug, throw_errors) {
    return new Promise((resolve, reject) => {
      try {
        this.startServices();

        _logger.logger.debug("Initiating AgentCom-\t%s:%d", host, port);

        const AgentCom = require("./com_ws/AgentComWs").default;

        this.agentCom = new AgentCom(this.id, host, port, proxy, token, labels, tags, debug, !throw_errors);
        this.commandHandler = new _CommandHandler.default(this.agentCom, this.augManager);
        this.output.setAgentCom(this.agentCom);
        this.agentCom.connect(); // pre-warm utils

        (0, _utils.initUtils)();
        this.agentCom.waitForReady(keepRef).then(resolve).catch(reject);
      } catch (err) {
        reject(err);
      }
    });
  }

}

let singleton = new Singleton();
exports.singleton = singleton;