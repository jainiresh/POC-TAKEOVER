"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TraceNamespace = void 0;

var _logger = require("../../logger");

var _Namespace = _interopRequireDefault(require("./Namespace"));

var _JSObjectNamespace = _interopRequireDefault(require("./JSObjectNamespace"));

var _ContainerNamespace = _interopRequireDefault(require("./ContainerNamespace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const config = require("../../config");

const exceptions = require('../../exceptions');

const SPAN_GENERIC_TO_DD = {
  "tags": "_tags",
  "service": "_service",
  "name": "_name",
  "_parent": "_parentTracer",
  "duration": "_duration",
  "context": "_spanContext",
  "_context": "_spanContext",
  "start_time": "_startTime"
};

class TraceNamespace extends _Namespace.default {
  constructor(span, spanProvider) {
    super();
    this.span = span;
    this.spanProvider = spanProvider;
  }

  callMethod(name, args) {
    if (name === "dump") {
      return this.dump(args);
    }

    throw new exceptions.RookMethodNotFound(typeof this, name);
  }

  readAttribute(name) {
    if (!config.Tracing.ENABLED) {
      return new _JSObjectNamespace.default("Tracing failed to initialized");
    }

    if (name === "span") {
      return new _JSObjectNamespace.default(this.span);
    }

    if (name in this.span) {
      return new _JSObjectNamespace.default(name);
    }

    _logger.logger.debug("Attribute Not Found %s", name);

    return new _JSObjectNamespace.default(null);
  }

  dump() {
    if (!config.Tracing.ENABLED) {
      return new _JSObjectNamespace.default("Tracing failed to initialized");
    }

    if (this.spanProvider === "opentelemetry") {
      return this.dumpOpentelemetrySpan();
    } else if (this.spanProvider === "datadog") {
      return this.dumpDatadogSpan;
    }

    return new _ContainerNamespace.default({});
  }

  getSpanAttribute(attribute) {
    if (attribute in this.span) {
      return new _JSObjectNamespace.default(this.span[attribute], null);
    }

    return new _JSObjectNamespace.default(null);
  }

  dumpOpentelemetrySpan() {
    let attributes = {
      span_id: new _JSObjectNamespace.default(this.span.spanId),
      trace_id: new _JSObjectNamespace.default(this.span.traceId)
    };
    return new _ContainerNamespace.default(attributes);
  }

  dumpDatadogSpan() {
    let attributes = {};

    for (const [key, value] of Object.entries(SPAN_GENERIC_TO_DD)) {
      attributes[key] = this.getSpanAttribute(value);
    }

    attributes["parent_id"] = new _JSObjectNamespace.default(this.span.context()._parentId);
    attributes["span_id"] = new _JSObjectNamespace.default(this.span.context().toSpanId());
    attributes["trace_id"] = new _JSObjectNamespace.default(this.span.context().toTraceId());

    const isFinished = this.span.context()._isFinished;

    if (isFinished !== undefined) {
      attributes["finished"] = new _JSObjectNamespace.default(isFinished);
    } else {
      attributes["finished"] = new _JSObjectNamespace.default(false);
    }

    this.span = undefined;
    return new _ContainerNamespace.default(attributes);
  }

}

exports.TraceNamespace = TraceNamespace;