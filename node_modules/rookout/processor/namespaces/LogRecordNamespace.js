"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ContainerNamespace = _interopRequireDefault(require("./ContainerNamespace"));

var _JSObjectNamespace = _interopRequireDefault(require("./JSObjectNamespace"));

var _LogRecord = require("../../services/LoggingService/LogRecord");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const config = require("../../config");

class LogRecordNamespace extends _JSObjectNamespace.default {
  constructor(logRecord) {
    super(logRecord);
  }

  callMethod(name, args) {
    switch (name) {
      case "dump":
        return this.dump();

      case "format":
        return this.format();

      default:
        return new _ContainerNamespace.default();
    }
  }

  format() {
    return new _JSObjectNamespace.default(this.obj.getMessage());
  }

  readAttribute(name) {
    this.prepareLogRecordForReadingAttribute(name);
    return _JSObjectNamespace.default.prototype.readAttribute.call(this, name);
  }

  prepareLogRecordForReadingAttribute(name) {
    switch (name) {
      case _LogRecord.LOG_RECORD_MESSAGE_FIELD_NAME:
        this.obj.formatMessage();
        break;

      case _LogRecord.LOG_RECORD_LEVEL_NAME_FIELD_NAME:
        this.obj.formatLevelName();
        break;

      case _LogRecord.LOG_RECORD_LOG_CONTEXT_FIELD_NAME:
        this.obj.setContext();
        break;

      case _LogRecord.LOG_RECORD_LINENO_FIELD_NAME:
      case _LogRecord.LOG_RECORD_LOG_FILEPATH_FIELD_NAME:
        this.obj.setLogLocation();
        break;
    }
  }

  dump() {
    return this;
  }

  dumpToVariant(variant) {
    variant.setLevelName(this.obj.getLevelName());
    variant.setMsg(this.obj.getMessage());
    variant.setFormattedMessage(this.obj.getMessage());
    variant.setTime(this.obj.time);
    variant.setModule(this.obj.module);

    if (config.LogHandlerService.ENRICH_LIVE_LOGGER) {
      variant.setFilename(this.obj.getFilename());
      variant.setLineno(this.obj.getLineno());
    }

    let logContextMap = variant.getLogContextMap();
    const log_context = this.obj.getContext();

    for (const property in log_context) {
      logContextMap.set(property, log_context[property]);
    }
  }

}

exports.default = LogRecordNamespace;