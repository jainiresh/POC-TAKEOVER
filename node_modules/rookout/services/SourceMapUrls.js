"use strict";

/*
The MIT License (MIT)

Copyright (c) 2014, 2015, 2016, 2017, 2018, 2019, 2020 Simon Lydell
Copyright (c) 2019 ZHAO Jinxiang

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var atob = require("atob");

var urlLib = require("url");

var pathLib = require("path");

const decode = require('safe-decode-uri-component');

function
  /* ...urls */
resolveUrl() {
  return Array.prototype.reduce.call(arguments, function (resolved, nextUrl) {
    return urlLib.resolve(resolved, nextUrl);
  });
}

function convertWindowsPath(aPath) {
  return pathLib.sep === "\\" ? aPath.replace(/\\/g, "/").replace(/^[a-z]:\/?/i, "/") : aPath;
}

function customDecodeUriComponent(string) {
  // `decodeUriComponentLib` turns `+` into ` `, but that's not wanted.
  return decode(string.replace(/\+/g, "%2B"));
}

function parseMapToJSON(string, data) {
  try {
    return JSON.parse(string.replace(/^\)\]\}'/, ""));
  } catch (error) {
    error.sourceMapData = data;
    throw error;
  }
}

function readSync(read, url, data) {
  var readUrl = customDecodeUriComponent(url);

  try {
    return String(read(readUrl));
  } catch (error) {
    error.sourceMapData = data;
    throw error;
  }
}
/**
 * JSON text exchanged between systems that are not part of a closed ecosystem
 * MUST be encoded using UTF-8.
 *
 * {@link https://tools.ietf.org/html/rfc8259#section-8.1 | Character Encoding}
 */


var jsonCharacterEncoding = "utf-8";

function base64ToBuf(b64) {
  var binStr = atob(b64);
  var len = binStr.length;
  var arr = new Uint8Array(len);

  for (var i = 0; i < len; i++) {
    arr[i] = binStr.charCodeAt(i);
  }

  return arr;
}

function decodeBase64String(b64) {
  if (typeof TextDecoder === "undefined" || typeof Uint8Array === "undefined") {
    return atob(b64);
  }

  var buf = base64ToBuf(b64); // Note: `decoder.decode` method will throw a `DOMException` with the
  // `"EncodingError"` value when an coding error is found.

  var decoder = new TextDecoder(jsonCharacterEncoding, {
    fatal: true
  });
  return decoder.decode(buf);
}

module.exports = {
  resolveUrl: resolveUrl,
  convertWindowsPath: convertWindowsPath,
  parseMapToJSON: parseMapToJSON,
  readSync: readSync,
  decodeBase64String: decodeBase64String
};