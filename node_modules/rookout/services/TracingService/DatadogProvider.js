'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatadogProvider = void 0;

var _BasicProvider = require("./BasicProvider");

const ah = require('async_hooks');

const {
  logger
} = require('../../logger');

const {
  conditionalRequire
} = require('../../utils');

class DatadogProvider extends _BasicProvider.BasicProvider {
  constructor() {
    super();
    this.globalStoreName = "__rookout_datadog_span";
    this.name = "datadog";
  }

  patch() {
    if ((ah === null || ah === void 0 ? void 0 : ah.createHook) === undefined) {
      return false;
    }

    const self = this;
    const originalCreateHook = ah.createHook.bind(ah);

    try {
      logger.debug("Hooking async_hooks' `createHook`"); // Change `createHook` to what we want it to be

      ah.createHook = hook => {
        let originalBefore = hook.before;

        if (typeof originalBefore === "function") {
          originalBefore = originalBefore.bind(hook);
        }

        hook.before = asyncId => {
          try {
            if (self.tracingEnabled) {
              const span = global.__rookoutGetDatadogSpan();

              if (span != null && span.span != null) {
                global[self.globalStoreName] = span.span;
              }
            }
          } catch (e) {
            logger.debug("hook.before failed with:", e);
          }

          if (typeof originalBefore === "function") {
            originalBefore(asyncId);
          }
        };

        hook.before = hook.before.bind(hook);
        return originalCreateHook(hook);
      };

      ah.createHook = ah.createHook.bind(ah); // Patch Datadog

      const dd = conditionalRequire('dd-trace');
      const ddCore = conditionalRequire('dd-trace/packages/datadog-core');

      if (dd == null || ddCore == null || typeof dd.init !== "function") {
        return false;
      }

      global.__rookoutGetDatadogSpan = () => {
        if (ddCore.storage == null || typeof ddCore.storage.getStore !== "function") {
          return null;
        }

        return ddCore.storage.getStore();
      }; // Patch init function to notify us when the tracer is initialized


      const originalTracerInit = dd.init.bind(dd);

      dd.init = opts => {
        const tracer = originalTracerInit(opts);
        self.tracingEnabled = true;
        return tracer;
      };

      dd.init = dd.init.bind(dd);
      return true;
    } catch (e) {
      logger.error("Failed to hook Datadog's async hook", e);
      return false;
    } finally {
      ah.createHook = originalCreateHook;
    }
  }

}

exports.DatadogProvider = DatadogProvider;