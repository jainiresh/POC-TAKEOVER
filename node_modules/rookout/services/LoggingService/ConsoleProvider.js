"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConsoleProvider = void 0;

var _BasicProvider = require("./BasicProvider");

var _LogRecord = require("./LogRecord");

const config = require("../../config");

class ConsoleProvider extends _BasicProvider.BasicProvider {
  constructor(loggingService) {
    super(loggingService);
    this.module = _LogRecord.LogModules.CONSOLE;
    this.hooks = {
      log: null,
      debug: null,
      info: null,
      warn: null,
      error: null,
      trace: null
    };
  }

  patch() {
    if (config.LogHandlerService.CONSOLE_FUNCTIONS_HOOK_ENABLED === false || typeof console === "undefined") {
      return false;
    }

    const levels = {
      log: "LOG",
      debug: "DEBUG",
      info: "INFO",
      warn: "WARN",
      error: "ERROR",
      trace: "TRACE"
    };
    let hooked = false;

    for (const level in levels) {
      const recordName = levels[level];
      const originalFunction = console[level];

      if (typeof originalFunction !== "function") {
        continue;
      }

      this.hooks[level] = originalFunction;

      if (originalFunction.length !== 0) {
        console.log(`did not override console.${level}() because of unexpected args`, {
          func: originalFunction.toString(),
          args: originalFunction.length
        });
        continue;
      }

      console[level] = (...args) => {
        this.onNewLog({
          message: args,
          level: recordName,
          created: Date.now() / 1000
        });
        originalFunction(...args);
      };

      hooked = true;
    }

    return hooked;
  }

  unpatch() {
    for (const logName in this.hooks) {
      if (this.hooks[logName] !== null) {
        console[logName] = this.hooks[logName];
      }
    }
  }

}

exports.ConsoleProvider = ConsoleProvider;