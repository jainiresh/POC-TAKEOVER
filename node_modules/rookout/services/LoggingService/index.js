"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoggingService = void 0;

var _logger = require("../../logger");

var _IService = require("../IService");

var _ConsoleProvider = require("./ConsoleProvider");

var _WinstonProvider = require("./WinstonProvider");

var _Log4jsProvider = require("./Log4jsProvider");

var _PinoProvider = require("./PinoProvider");

class LoggingService extends _IService.IService {
  constructor() {
    super();
    this.augs = {};
    this.providers = {
      console: new _ConsoleProvider.ConsoleProvider(this),
      winston: new _WinstonProvider.WinstonProvider(this),
      log4js: new _Log4jsProvider.Log4jsProvider(this),
      pino: new _PinoProvider.PinoProvider(this)
    };
  }

  start() {
    for (const providerName in this.providers) {
      const hooked = this.providers[providerName].patch();

      if (hooked) {
        _logger.logger.debug(`hooked logging provider: ${providerName}`);
      }
    }
  }

  close() {
    for (const providerName in this.providers) {
      this.providers[providerName].unpatch();
    }
  }

  addLoggingAug(aug) {
    _logger.logger.debug('Adding Logging Aug, ' + aug.augId);

    this.augs[aug.augId] = aug;
    aug.setActive();
  }

  removeAug(augId) {
    _logger.logger.debug('Removing Logging Aug, ' + augId);

    delete this.augs[augId];
  }

  removeAugTemporarily(augId, duration) {
    _logger.logger.debug("Not removing aug temporarily because it is a Logging Aug");
  }

  removeAugfromInspector(augId) {
    _logger.logger.debug("Not removing aug from inspector because it is a Logging Aug");
  }

  clearAugs() {
    this.augs = {};
  }

}

exports.LoggingService = LoggingService;