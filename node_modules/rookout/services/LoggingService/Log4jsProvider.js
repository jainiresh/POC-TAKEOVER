"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Log4jsProvider = void 0;

var _BasicProvider = require("./BasicProvider");

var _LogRecord = require("./LogRecord");

var _utils = require("../../utils");

var _logger = require("../../logger");

class Log4jsProvider extends _BasicProvider.BasicProvider {
  constructor(logginService) {
    super(logginService);
    this.module = _LogRecord.LogModules.LOG4JS;
  }

  patch() {
    const loggerClass = (0, _utils.conditionalRequire)('log4js/lib/logger');

    if (!loggerClass) {
      return false;
    }

    const oldLog = loggerClass.prototype.log;

    if (!oldLog.toString().split('\n')[0].includes('(level, ...args)')) {
      _logger.logger.error("did not override log4js' Logger.log() because of unexpected args", {
        func: oldLog.toString()
      });

      return false;
    }

    const self = this;

    loggerClass.prototype.log = function (level, ...args) {
      const allowedLevels = ["ALL", "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL"];
      const levelName = level.toString().toUpperCase();

      if (allowedLevels.indexOf(levelName) !== -1) {
        self.onNewLog({
          message: args,
          level: levelName,
          created: Date.now() / 1000,
          log_context: this.context
        });
      }

      return oldLog.call(this, level, ...args);
    };

    return true;
  }

  unpatch() {}

}

exports.Log4jsProvider = Log4jsProvider;