"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AssertTrackingService = void 0;

var _IService = require("./IService");

var _logger = require("../logger");

class AssertTrackingService extends _IService.IService {
  constructor() {
    super();
    this.aug = {};
  }

  addAug(aug) {
    _logger.logger.debug('Adding Assert Aug, ' + aug.augId);

    this.aug = aug;
  }

  removeAug(augId) {
    _logger.logger.debug('Removing Assert Aug, ' + augId);

    this.aug = {};
  }

  removeAugTemporarily(augId, duration) {
    _logger.logger.debug("Not removing aug temporarily because it is an assert tracking Aug");
  }

  clearAugs() {
    this.aug = {};
  }

  removeAugfromInspector() {}

  hookOnAsserts() {
    const execute = require("./dummies/AssertTrackingServiceDummy");

    const matchersModule = global[Symbol.for('$$jest-matchers-object')].matchers; // Auto generated code from `assert_tracking_hooks_gen.py`

    const toBe = matchersModule.toBe;

    matchersModule.toBe = function (actual, expected, ...args) {
      const res = toBe.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toHaveLength = matchersModule.toHaveLength;

    matchersModule.toHaveLength = function (actual, expected, ...args) {
      const res = toHaveLength.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeDefined = matchersModule.toBeDefined;

    matchersModule.toBeDefined = function (actual, ...args) {
      const res = toBeDefined.call(this, actual, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeFalsy = matchersModule.toBeFalsy;

    matchersModule.toBeFalsy = function (actual, ...args) {
      const res = toBeFalsy.call(this, actual, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeGreaterThan = matchersModule.toBeGreaterThan;

    matchersModule.toBeGreaterThan = function (actual, expected, ...args) {
      const res = toBeGreaterThan.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeGreaterThanOrEqual = matchersModule.toBeGreaterThanOrEqual;

    matchersModule.toBeGreaterThanOrEqual = function (actual, expected, ...args) {
      const res = toBeGreaterThanOrEqual.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeLessThan = matchersModule.toBeLessThan;

    matchersModule.toBeLessThan = function (actual, expected, ...args) {
      const res = toBeLessThan.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeLessThanOrEqual = matchersModule.toBeLessThanOrEqual;

    matchersModule.toBeLessThanOrEqual = function (actual, expected, ...args) {
      const res = toBeLessThanOrEqual.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeInstanceOf = matchersModule.toBeInstanceOf;

    matchersModule.toBeInstanceOf = function (actual, expected, ...args) {
      const res = toBeInstanceOf.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeNull = matchersModule.toBeNull;

    matchersModule.toBeNull = function (actual, ...args) {
      const res = toBeNull.call(this, actual, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeTruthy = matchersModule.toBeTruthy;

    matchersModule.toBeTruthy = function (actual, ...args) {
      const res = toBeTruthy.call(this, actual, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeUndefined = matchersModule.toBeUndefined;

    matchersModule.toBeUndefined = function (actual, ...args) {
      const res = toBeUndefined.call(this, actual, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toBeNaN = matchersModule.toBeNaN;

    matchersModule.toBeNaN = function (actual, ...args) {
      const res = toBeNaN.call(this, actual, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toContain = matchersModule.toContain;

    matchersModule.toContain = function (actual, expected, ...args) {
      const res = toContain.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toContainEqual = matchersModule.toContainEqual;

    matchersModule.toContainEqual = function (actual, expected, ...args) {
      const res = toContainEqual.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toEqual = matchersModule.toEqual;

    matchersModule.toEqual = function (actual, expected, ...args) {
      const res = toEqual.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };

    const toStrictEqual = matchersModule.toStrictEqual;

    matchersModule.toStrictEqual = function (actual, expected, ...args) {
      const res = toStrictEqual.call(this, actual, expected, ...args);
      const message = res.message();

      if (!(res.pass ^ this.isNot)) {
        execute();
      }

      return res;
    };
  }

}

exports.AssertTrackingService = AssertTrackingService;