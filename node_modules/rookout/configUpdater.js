"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfigUpdater = void 0;

var _logger = require("./logger");

var _utils = require("./utils");

const config = require('./config');

const nodeSupport = require('./nodeVersionSupport');

class ConfigUpdater {
  static updateConfig(newConfig, configObject) {
    newConfig.forEach(function (v, k) {
      switch (k) {
        case "NODE_StringCache_UserMessage":
          _logger.logger.debug("Updating STRING_CACHE_USERMESSAGE value to: " + (0, _utils.isBooleanValue)(v));

          configObject.DumpConfig.STRING_CACHE_USERMESSAGE = (0, _utils.isBooleanValue)(v);
          break;

        case "NODE_PROTOBUF_VERSION_2":
          let protobuf2EnvVar = process.env.PROTOBUF_VERSION_2;

          if (protobuf2EnvVar) {
            _logger.logger.debug("Updating Protobuf_Version2 from env var value to: " + (0, _utils.isBooleanValue)(protobuf2EnvVar));

            configObject.OutputWsConfiguration.PROTOBUF_VERSION2 = (0, _utils.isBooleanValue)(protobuf2EnvVar);
          } else {
            _logger.logger.debug("Updating Protobuf_Version2 value to: " + (0, _utils.isBooleanValue)(v));

            configObject.OutputWsConfiguration.PROTOBUF_VERSION2 = (0, _utils.isBooleanValue)(v);
          }

          break;

        case "NODE_GLOBAL_RATE_LIMIT_QUOTA_MS":
          if (configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT === "") {
            configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT_QUOTA_MS = v;

            if (configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT_WINDOW_SIZE_MS !== "") {
              configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT = configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT_QUOTA_MS + "/" + configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT_WINDOW_SIZE_MS;

              _logger.logger.debug(`Updating GLOBAL_RATE_LIMIT_SPECS value to: ${configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT}`);
            }
          } else {
            _logger.logger.debug(`Global rate limit specs already set to: ${configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT}`);
          }

          break;

        case "NODE_GLOBAL_RATE_LIMIT_WINDOW_SIZE_MS":
          if (configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT === "") {
            configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT_WINDOW_SIZE_MS = v;

            if (configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT_QUOTA_MS !== "") {
              configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT = configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT_QUOTA_MS + "/" + configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT_WINDOW_SIZE_MS;

              _logger.logger.debug(`Updating GLOBAL_RATE_LIMIT_SPECS value to: ${configObject.RateLimitConfiguration.GLOBAL_RATE_LIMIT}`);
            }
          }

          break;

        case "NODE_SDK_SUPPORTED_VERSIONS":
          if (!config.AgentComConfiguration.SKIP_NODE_VERSION_VERIFICATION) {
            nodeSupport.updateVersionSupport(v);

            _logger.logger.debug(`Updating DebuggerService.IS_SUPPORTED value to: ${config.DebuggerService.IS_SUPPORTED}`);
          }

          break;

        case "NODE_ENRICH_LIVE_LOGGER":
          _logger.logger.debug("Updating ENRICH_LIVE_LOGGER value to: " + (0, _utils.isBooleanValue)(v));

          configObject.DumpConfig.ENRICH_LIVE_LOGGER = (0, _utils.isBooleanValue)(v);
          break;
      }
    });
  }

}

exports.ConfigUpdater = ConfigUpdater;